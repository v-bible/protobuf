// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file bible/v1/version.proto (package bible.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message bible.v1.Version
 */
export class Version extends Message<Version> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: bool only_nt = 4;
   */
  onlyNt = false;

  /**
   * @generated from field: bool only_ot = 5;
   */
  onlyOt = false;

  /**
   * @generated from field: bool with_apocrypha = 6;
   */
  withApocrypha = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: repeated bible.v1.VersionFormat formats = 9;
   */
  formats: VersionFormat[] = [];

  /**
   * @generated from field: string language_id = 10;
   */
  languageId = "";

  constructor(data?: PartialMessage<Version>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.Version";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "only_nt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "only_ot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "with_apocrypha", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
    { no: 9, name: "formats", kind: "message", T: VersionFormat, repeated: true },
    { no: 10, name: "language_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Version {
    return new Version().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJsonString(jsonString, options);
  }

  static equals(a: Version | PlainMessage<Version> | undefined, b: Version | PlainMessage<Version> | undefined): boolean {
    return proto3.util.equals(Version, a, b);
  }
}

/**
 * @generated from message bible.v1.VersionFormat
 */
export class VersionFormat extends Message<VersionFormat> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string ref = 3;
   */
  ref = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string version_id = 6;
   */
  versionId = "";

  constructor(data?: PartialMessage<VersionFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.VersionFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionFormat {
    return new VersionFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionFormat {
    return new VersionFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionFormat {
    return new VersionFormat().fromJsonString(jsonString, options);
  }

  static equals(a: VersionFormat | PlainMessage<VersionFormat> | undefined, b: VersionFormat | PlainMessage<VersionFormat> | undefined): boolean {
    return proto3.util.equals(VersionFormat, a, b);
  }
}

/**
 * @generated from message bible.v1.VersionLanguage
 */
export class VersionLanguage extends Message<VersionLanguage> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string web_origin = 4;
   */
  webOrigin = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<VersionLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.VersionLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionLanguage {
    return new VersionLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionLanguage {
    return new VersionLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionLanguage {
    return new VersionLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: VersionLanguage | PlainMessage<VersionLanguage> | undefined, b: VersionLanguage | PlainMessage<VersionLanguage> | undefined): boolean {
    return proto3.util.equals(VersionLanguage, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllLanguageRequest
 */
export class GetAllLanguageRequest extends Message<GetAllLanguageRequest> {
  /**
   * Query params
   *
   * @generated from field: optional string web_origin = 1;
   */
  webOrigin?: string;

  constructor(data?: PartialMessage<GetAllLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllLanguageRequest {
    return new GetAllLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllLanguageRequest {
    return new GetAllLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllLanguageRequest {
    return new GetAllLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllLanguageRequest | PlainMessage<GetAllLanguageRequest> | undefined, b: GetAllLanguageRequest | PlainMessage<GetAllLanguageRequest> | undefined): boolean {
    return proto3.util.equals(GetAllLanguageRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllLanguageResponse
 */
export class GetAllLanguageResponse extends Message<GetAllLanguageResponse> {
  /**
   * @generated from field: repeated bible.v1.VersionLanguage languages = 1;
   */
  languages: VersionLanguage[] = [];

  constructor(data?: PartialMessage<GetAllLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "languages", kind: "message", T: VersionLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllLanguageResponse {
    return new GetAllLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllLanguageResponse {
    return new GetAllLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllLanguageResponse {
    return new GetAllLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllLanguageResponse | PlainMessage<GetAllLanguageResponse> | undefined, b: GetAllLanguageResponse | PlainMessage<GetAllLanguageResponse> | undefined): boolean {
    return proto3.util.equals(GetAllLanguageResponse, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllVersionRequest
 */
export class GetAllVersionRequest extends Message<GetAllVersionRequest> {
  /**
   * Query params
   *
   * @generated from field: optional string version_code = 1;
   */
  versionCode?: string;

  /**
   * @generated from field: optional string lang_code = 2;
   */
  langCode?: string;

  /**
   * @generated from field: optional string web_origin = 3;
   */
  webOrigin?: string;

  constructor(data?: PartialMessage<GetAllVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllVersionRequest {
    return new GetAllVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllVersionRequest {
    return new GetAllVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllVersionRequest {
    return new GetAllVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllVersionRequest | PlainMessage<GetAllVersionRequest> | undefined, b: GetAllVersionRequest | PlainMessage<GetAllVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetAllVersionRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllVersionResponse
 */
export class GetAllVersionResponse extends Message<GetAllVersionResponse> {
  /**
   * @generated from field: repeated bible.v1.Version versions = 1;
   */
  versions: Version[] = [];

  constructor(data?: PartialMessage<GetAllVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "versions", kind: "message", T: Version, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllVersionResponse {
    return new GetAllVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllVersionResponse {
    return new GetAllVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllVersionResponse {
    return new GetAllVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllVersionResponse | PlainMessage<GetAllVersionResponse> | undefined, b: GetAllVersionResponse | PlainMessage<GetAllVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetAllVersionResponse, a, b);
  }
}

