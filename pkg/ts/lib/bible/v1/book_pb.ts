// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file bible/v1/book.proto (package bible.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message bible.v1.Book
 */
export class Book extends Message<Book> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string canon = 4;
   */
  canon = "";

  /**
   * @generated from field: int32 order = 5;
   */
  order = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: repeated bible.v1.BookChapter chapters = 8;
   */
  chapters: BookChapter[] = [];

  /**
   * @generated from field: string version_id = 9;
   */
  versionId = "";

  constructor(data?: PartialMessage<Book>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.Book";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "canon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
    { no: 8, name: "chapters", kind: "message", T: BookChapter, repeated: true },
    { no: 9, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Book {
    return new Book().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJsonString(jsonString, options);
  }

  static equals(a: Book | PlainMessage<Book> | undefined, b: Book | PlainMessage<Book> | undefined): boolean {
    return proto3.util.equals(Book, a, b);
  }
}

/**
 * @generated from message bible.v1.BookChapter
 */
export class BookChapter extends Message<BookChapter> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 number = 2;
   */
  number = 0;

  /**
   * @generated from field: string ref = 3;
   */
  ref = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string book_id = 6;
   */
  bookId = "";

  constructor(data?: PartialMessage<BookChapter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.BookChapter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "book_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookChapter {
    return new BookChapter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookChapter {
    return new BookChapter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookChapter {
    return new BookChapter().fromJsonString(jsonString, options);
  }

  static equals(a: BookChapter | PlainMessage<BookChapter> | undefined, b: BookChapter | PlainMessage<BookChapter> | undefined): boolean {
    return proto3.util.equals(BookChapter, a, b);
  }
}

/**
 * @generated from message bible.v1.BookVerse
 */
export class BookVerse extends Message<BookVerse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 number = 2;
   */
  number = 0;

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: int32 order = 4;
   */
  order = 0;

  /**
   * @generated from field: int32 par_number = 5;
   */
  parNumber = 0;

  /**
   * @generated from field: int32 par_index = 6;
   */
  parIndex = 0;

  /**
   * @generated from field: bool is_poetry = 7;
   */
  isPoetry = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string chapter_id = 10;
   */
  chapterId = "";

  constructor(data?: PartialMessage<BookVerse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.BookVerse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "par_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "par_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "is_poetry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
    { no: 10, name: "chapter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookVerse {
    return new BookVerse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookVerse {
    return new BookVerse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookVerse {
    return new BookVerse().fromJsonString(jsonString, options);
  }

  static equals(a: BookVerse | PlainMessage<BookVerse> | undefined, b: BookVerse | PlainMessage<BookVerse> | undefined): boolean {
    return proto3.util.equals(BookVerse, a, b);
  }
}

/**
 * @generated from message bible.v1.BookFootnote
 */
export class BookFootnote extends Message<BookFootnote> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: int32 position = 3;
   */
  position = 0;

  /**
   * @generated from field: int32 order = 4;
   */
  order = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: optional string verse_id = 7;
   */
  verseId?: string;

  /**
   * @generated from field: optional string heading_id = 8;
   */
  headingId?: string;

  /**
   * @generated from field: string chapter_id = 9;
   */
  chapterId = "";

  constructor(data?: PartialMessage<BookFootnote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.BookFootnote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
    { no: 7, name: "verse_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "heading_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "chapter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookFootnote {
    return new BookFootnote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookFootnote {
    return new BookFootnote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookFootnote {
    return new BookFootnote().fromJsonString(jsonString, options);
  }

  static equals(a: BookFootnote | PlainMessage<BookFootnote> | undefined, b: BookFootnote | PlainMessage<BookFootnote> | undefined): boolean {
    return proto3.util.equals(BookFootnote, a, b);
  }
}

/**
 * @generated from message bible.v1.BookHeading
 */
export class BookHeading extends Message<BookHeading> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: int32 order = 3;
   */
  order = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string verse_id = 6;
   */
  verseId = "";

  /**
   * @generated from field: string chapter_id = 7;
   */
  chapterId = "";

  /**
   * @generated from field: repeated bible.v1.BookFootnote footnotes = 8;
   */
  footnotes: BookFootnote[] = [];

  /**
   * @generated from field: repeated bible.v1.BookReference references = 9;
   */
  references: BookReference[] = [];

  constructor(data?: PartialMessage<BookHeading>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.BookHeading";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "verse_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "chapter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "footnotes", kind: "message", T: BookFootnote, repeated: true },
    { no: 9, name: "references", kind: "message", T: BookReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookHeading {
    return new BookHeading().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookHeading {
    return new BookHeading().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookHeading {
    return new BookHeading().fromJsonString(jsonString, options);
  }

  static equals(a: BookHeading | PlainMessage<BookHeading> | undefined, b: BookHeading | PlainMessage<BookHeading> | undefined): boolean {
    return proto3.util.equals(BookHeading, a, b);
  }
}

/**
 * @generated from message bible.v1.BookReference
 */
export class BookReference extends Message<BookReference> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: optional int32 position = 3;
   */
  position?: number;

  /**
   * @generated from field: int32 order = 4;
   */
  order = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: optional string verse_id = 7;
   */
  verseId?: string;

  /**
   * @generated from field: optional string heading_id = 8;
   */
  headingId?: string;

  /**
   * @generated from field: string chapter_id = 9;
   */
  chapterId = "";

  constructor(data?: PartialMessage<BookReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.BookReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
    { no: 7, name: "verse_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "heading_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "chapter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookReference {
    return new BookReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookReference {
    return new BookReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookReference {
    return new BookReference().fromJsonString(jsonString, options);
  }

  static equals(a: BookReference | PlainMessage<BookReference> | undefined, b: BookReference | PlainMessage<BookReference> | undefined): boolean {
    return proto3.util.equals(BookReference, a, b);
  }
}

/**
 * @generated from message bible.v1.PsalmMetadata
 */
export class PsalmMetadata extends Message<PsalmMetadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string chapter_id = 5;
   */
  chapterId = "";

  constructor(data?: PartialMessage<PsalmMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.PsalmMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "chapter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PsalmMetadata {
    return new PsalmMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PsalmMetadata {
    return new PsalmMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PsalmMetadata {
    return new PsalmMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PsalmMetadata | PlainMessage<PsalmMetadata> | undefined, b: PsalmMetadata | PlainMessage<PsalmMetadata> | undefined): boolean {
    return proto3.util.equals(PsalmMetadata, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllBookRequest
 */
export class GetAllBookRequest extends Message<GetAllBookRequest> {
  /**
   * Query params
   *
   * @generated from field: string version_code = 1;
   */
  versionCode = "";

  /**
   * @generated from field: string lang_code = 2;
   */
  langCode = "";

  /**
   * @generated from field: string web_origin = 3;
   */
  webOrigin = "";

  constructor(data?: PartialMessage<GetAllBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllBookRequest {
    return new GetAllBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllBookRequest {
    return new GetAllBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllBookRequest {
    return new GetAllBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllBookRequest | PlainMessage<GetAllBookRequest> | undefined, b: GetAllBookRequest | PlainMessage<GetAllBookRequest> | undefined): boolean {
    return proto3.util.equals(GetAllBookRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetAllBookResponse
 */
export class GetAllBookResponse extends Message<GetAllBookResponse> {
  /**
   * @generated from field: repeated bible.v1.Book books = 1;
   */
  books: Book[] = [];

  constructor(data?: PartialMessage<GetAllBookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetAllBookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "books", kind: "message", T: Book, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllBookResponse {
    return new GetAllBookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllBookResponse {
    return new GetAllBookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllBookResponse {
    return new GetAllBookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllBookResponse | PlainMessage<GetAllBookResponse> | undefined, b: GetAllBookResponse | PlainMessage<GetAllBookResponse> | undefined): boolean {
    return proto3.util.equals(GetAllBookResponse, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneBookRequest
 */
export class GetOneBookRequest extends Message<GetOneBookRequest> {
  /**
   * @generated from field: string book_code = 1;
   */
  bookCode = "";

  /**
   * Query params
   *
   * @generated from field: string version_code = 2;
   */
  versionCode = "";

  /**
   * @generated from field: string lang_code = 3;
   */
  langCode = "";

  /**
   * @generated from field: string web_origin = 4;
   */
  webOrigin = "";

  constructor(data?: PartialMessage<GetOneBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "book_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneBookRequest {
    return new GetOneBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneBookRequest {
    return new GetOneBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneBookRequest {
    return new GetOneBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneBookRequest | PlainMessage<GetOneBookRequest> | undefined, b: GetOneBookRequest | PlainMessage<GetOneBookRequest> | undefined): boolean {
    return proto3.util.equals(GetOneBookRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneBookResponse
 */
export class GetOneBookResponse extends Message<GetOneBookResponse> {
  /**
   * @generated from field: bible.v1.Book book = 1;
   */
  book?: Book;

  constructor(data?: PartialMessage<GetOneBookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneBookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "book", kind: "message", T: Book },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneBookResponse {
    return new GetOneBookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneBookResponse {
    return new GetOneBookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneBookResponse {
    return new GetOneBookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneBookResponse | PlainMessage<GetOneBookResponse> | undefined, b: GetOneBookResponse | PlainMessage<GetOneBookResponse> | undefined): boolean {
    return proto3.util.equals(GetOneBookResponse, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneChapterRequest
 */
export class GetOneChapterRequest extends Message<GetOneChapterRequest> {
  /**
   * @generated from field: string book_code = 1;
   */
  bookCode = "";

  /**
   * @generated from field: string chapter_num = 2;
   */
  chapterNum = "";

  /**
   * Query params
   *
   * @generated from field: string version_code = 3;
   */
  versionCode = "";

  /**
   * @generated from field: string lang_code = 4;
   */
  langCode = "";

  /**
   * @generated from field: string web_origin = 5;
   */
  webOrigin = "";

  constructor(data?: PartialMessage<GetOneChapterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneChapterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "book_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chapter_num", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneChapterRequest {
    return new GetOneChapterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneChapterRequest {
    return new GetOneChapterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneChapterRequest {
    return new GetOneChapterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneChapterRequest | PlainMessage<GetOneChapterRequest> | undefined, b: GetOneChapterRequest | PlainMessage<GetOneChapterRequest> | undefined): boolean {
    return proto3.util.equals(GetOneChapterRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneChapterResponse
 */
export class GetOneChapterResponse extends Message<GetOneChapterResponse> {
  /**
   * @generated from field: bible.v1.BookChapter chapter = 1;
   */
  chapter?: BookChapter;

  /**
   * @generated from field: repeated bible.v1.BookVerse verses = 2;
   */
  verses: BookVerse[] = [];

  /**
   * @generated from field: repeated bible.v1.BookFootnote footnotes = 3;
   */
  footnotes: BookFootnote[] = [];

  /**
   * @generated from field: repeated bible.v1.BookHeading headings = 4;
   */
  headings: BookHeading[] = [];

  /**
   * @generated from field: repeated bible.v1.BookReference references = 5;
   */
  references: BookReference[] = [];

  /**
   * @generated from field: optional bible.v1.PsalmMetadata psalm_metadata = 6;
   */
  psalmMetadata?: PsalmMetadata;

  constructor(data?: PartialMessage<GetOneChapterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneChapterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chapter", kind: "message", T: BookChapter },
    { no: 2, name: "verses", kind: "message", T: BookVerse, repeated: true },
    { no: 3, name: "footnotes", kind: "message", T: BookFootnote, repeated: true },
    { no: 4, name: "headings", kind: "message", T: BookHeading, repeated: true },
    { no: 5, name: "references", kind: "message", T: BookReference, repeated: true },
    { no: 6, name: "psalm_metadata", kind: "message", T: PsalmMetadata, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneChapterResponse {
    return new GetOneChapterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneChapterResponse {
    return new GetOneChapterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneChapterResponse {
    return new GetOneChapterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneChapterResponse | PlainMessage<GetOneChapterResponse> | undefined, b: GetOneChapterResponse | PlainMessage<GetOneChapterResponse> | undefined): boolean {
    return proto3.util.equals(GetOneChapterResponse, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneChapterTextRequest
 */
export class GetOneChapterTextRequest extends Message<GetOneChapterTextRequest> {
  /**
   * @generated from field: string book_code = 1;
   */
  bookCode = "";

  /**
   * @generated from field: string chapter_num = 2;
   */
  chapterNum = "";

  /**
   * Query params
   *
   * @generated from field: string version_code = 3;
   */
  versionCode = "";

  /**
   * @generated from field: string lang_code = 4;
   */
  langCode = "";

  /**
   * @generated from field: string web_origin = 5;
   */
  webOrigin = "";

  constructor(data?: PartialMessage<GetOneChapterTextRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneChapterTextRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "book_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chapter_num", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "web_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneChapterTextRequest {
    return new GetOneChapterTextRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneChapterTextRequest {
    return new GetOneChapterTextRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneChapterTextRequest {
    return new GetOneChapterTextRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneChapterTextRequest | PlainMessage<GetOneChapterTextRequest> | undefined, b: GetOneChapterTextRequest | PlainMessage<GetOneChapterTextRequest> | undefined): boolean {
    return proto3.util.equals(GetOneChapterTextRequest, a, b);
  }
}

/**
 * @generated from message bible.v1.GetOneChapterTextResponse
 */
export class GetOneChapterTextResponse extends Message<GetOneChapterTextResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<GetOneChapterTextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bible.v1.GetOneChapterTextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOneChapterTextResponse {
    return new GetOneChapterTextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOneChapterTextResponse {
    return new GetOneChapterTextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOneChapterTextResponse {
    return new GetOneChapterTextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOneChapterTextResponse | PlainMessage<GetOneChapterTextResponse> | undefined, b: GetOneChapterTextResponse | PlainMessage<GetOneChapterTextResponse> | undefined): boolean {
    return proto3.util.equals(GetOneChapterTextResponse, a, b);
  }
}

