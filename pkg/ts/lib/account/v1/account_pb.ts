// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file account/v1/account.proto (package account.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message account.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message account.v1.AccountSession
 */
export class AccountSession extends Message<AccountSession> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_access = 3;
   */
  lastAccess?: Timestamp;

  /**
   * @generated from field: string ip_address = 4;
   */
  ipAddress = "";

  constructor(data?: PartialMessage<AccountSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.AccountSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "last_access", kind: "message", T: Timestamp },
    { no: 4, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountSession {
    return new AccountSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountSession {
    return new AccountSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountSession {
    return new AccountSession().fromJsonString(jsonString, options);
  }

  static equals(a: AccountSession | PlainMessage<AccountSession> | undefined, b: AccountSession | PlainMessage<AccountSession> | undefined): boolean {
    return proto3.util.equals(AccountSession, a, b);
  }
}

/**
 * @generated from message account.v1.GetAccountByIdRequest
 */
export class GetAccountByIdRequest extends Message<GetAccountByIdRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.GetAccountByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined, b: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountByIdRequest, a, b);
  }
}

/**
 * @generated from message account.v1.GetAccountByIdResponse
 */
export class GetAccountByIdResponse extends Message<GetAccountByIdResponse> {
  /**
   * @generated from field: account.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<GetAccountByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.GetAccountByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIdResponse {
    return new GetAccountByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIdResponse {
    return new GetAccountByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIdResponse {
    return new GetAccountByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIdResponse | PlainMessage<GetAccountByIdResponse> | undefined, b: GetAccountByIdResponse | PlainMessage<GetAccountByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountByIdResponse, a, b);
  }
}

/**
 * @generated from message account.v1.GetAccountSessionRequest
 */
export class GetAccountSessionRequest extends Message<GetAccountSessionRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.GetAccountSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountSessionRequest {
    return new GetAccountSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountSessionRequest {
    return new GetAccountSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountSessionRequest {
    return new GetAccountSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountSessionRequest | PlainMessage<GetAccountSessionRequest> | undefined, b: GetAccountSessionRequest | PlainMessage<GetAccountSessionRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountSessionRequest, a, b);
  }
}

/**
 * @generated from message account.v1.GetAccountSessionResponse
 */
export class GetAccountSessionResponse extends Message<GetAccountSessionResponse> {
  /**
   * @generated from field: repeated account.v1.AccountSession session = 1;
   */
  session: AccountSession[] = [];

  constructor(data?: PartialMessage<GetAccountSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.GetAccountSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: AccountSession, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountSessionResponse {
    return new GetAccountSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountSessionResponse {
    return new GetAccountSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountSessionResponse {
    return new GetAccountSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountSessionResponse | PlainMessage<GetAccountSessionResponse> | undefined, b: GetAccountSessionResponse | PlainMessage<GetAccountSessionResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountSessionResponse, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountRequest
 */
export class UpdateAccountRequest extends Message<UpdateAccountRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * Request body
   *
   * @generated from field: account.v1.UpdateAccountRequest.Body body = 2;
   */
  body?: UpdateAccountRequest_Body;

  constructor(data?: PartialMessage<UpdateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "message", T: UpdateAccountRequest_Body },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined, b: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountRequest, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountRequest.Body
 */
export class UpdateAccountRequest_Body extends Message<UpdateAccountRequest_Body> {
  /**
   * @generated from field: optional string first_name = 1;
   */
  firstName?: string;

  /**
   * @generated from field: optional string last_name = 2;
   */
  lastName?: string;

  constructor(data?: PartialMessage<UpdateAccountRequest_Body>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountRequest.Body";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountRequest_Body {
    return new UpdateAccountRequest_Body().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountRequest_Body {
    return new UpdateAccountRequest_Body().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountRequest_Body {
    return new UpdateAccountRequest_Body().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountRequest_Body | PlainMessage<UpdateAccountRequest_Body> | undefined, b: UpdateAccountRequest_Body | PlainMessage<UpdateAccountRequest_Body> | undefined): boolean {
    return proto3.util.equals(UpdateAccountRequest_Body, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountResponse
 */
export class UpdateAccountResponse extends Message<UpdateAccountResponse> {
  /**
   * @generated from field: account.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<UpdateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined, b: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAccountResponse, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountPasswordRequest
 */
export class UpdateAccountPasswordRequest extends Message<UpdateAccountPasswordRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * Request body
   *
   * @generated from field: account.v1.UpdateAccountPasswordRequest.Body body = 2;
   */
  body?: UpdateAccountPasswordRequest_Body;

  constructor(data?: PartialMessage<UpdateAccountPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "message", T: UpdateAccountPasswordRequest_Body },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountPasswordRequest {
    return new UpdateAccountPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountPasswordRequest {
    return new UpdateAccountPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountPasswordRequest {
    return new UpdateAccountPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountPasswordRequest | PlainMessage<UpdateAccountPasswordRequest> | undefined, b: UpdateAccountPasswordRequest | PlainMessage<UpdateAccountPasswordRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountPasswordRequest, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountPasswordRequest.Body
 */
export class UpdateAccountPasswordRequest_Body extends Message<UpdateAccountPasswordRequest_Body> {
  /**
   * @generated from field: string password = 1;
   */
  password = "";

  constructor(data?: PartialMessage<UpdateAccountPasswordRequest_Body>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountPasswordRequest.Body";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountPasswordRequest_Body {
    return new UpdateAccountPasswordRequest_Body().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountPasswordRequest_Body {
    return new UpdateAccountPasswordRequest_Body().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountPasswordRequest_Body {
    return new UpdateAccountPasswordRequest_Body().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountPasswordRequest_Body | PlainMessage<UpdateAccountPasswordRequest_Body> | undefined, b: UpdateAccountPasswordRequest_Body | PlainMessage<UpdateAccountPasswordRequest_Body> | undefined): boolean {
    return proto3.util.equals(UpdateAccountPasswordRequest_Body, a, b);
  }
}

/**
 * @generated from message account.v1.UpdateAccountPasswordResponse
 */
export class UpdateAccountPasswordResponse extends Message<UpdateAccountPasswordResponse> {
  /**
   * @generated from field: account.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<UpdateAccountPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.UpdateAccountPasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountPasswordResponse {
    return new UpdateAccountPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountPasswordResponse {
    return new UpdateAccountPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountPasswordResponse {
    return new UpdateAccountPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountPasswordResponse | PlainMessage<UpdateAccountPasswordResponse> | undefined, b: UpdateAccountPasswordResponse | PlainMessage<UpdateAccountPasswordResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAccountPasswordResponse, a, b);
  }
}

/**
 * @generated from message account.v1.DeleteAccountRequest
 */
export class DeleteAccountRequest extends Message<DeleteAccountRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<DeleteAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.DeleteAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined, b: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountRequest, a, b);
  }
}

/**
 * @generated from message account.v1.DeleteAccountResponse
 */
export class DeleteAccountResponse extends Message<DeleteAccountResponse> {
  /**
   * @generated from field: account.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<DeleteAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.DeleteAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined, b: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAccountResponse, a, b);
  }
}

