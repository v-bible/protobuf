// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bible/v1/book.proto

package biblev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookService_GetAllBook_FullMethodName        = "/bible.v1.BookService/GetAllBook"
	BookService_GetOneBook_FullMethodName        = "/bible.v1.BookService/GetOneBook"
	BookService_GetOneChapter_FullMethodName     = "/bible.v1.BookService/GetOneChapter"
	BookService_GetOneChapterText_FullMethodName = "/bible.v1.BookService/GetOneChapterText"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	GetAllBook(ctx context.Context, in *GetAllBookRequest, opts ...grpc.CallOption) (*GetAllBookResponse, error)
	GetOneBook(ctx context.Context, in *GetOneBookRequest, opts ...grpc.CallOption) (*GetOneBookResponse, error)
	GetOneChapter(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error)
	GetOneChapterText(ctx context.Context, in *GetOneChapterTextRequest, opts ...grpc.CallOption) (*GetOneChapterTextResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) GetAllBook(ctx context.Context, in *GetAllBookRequest, opts ...grpc.CallOption) (*GetAllBookResponse, error) {
	out := new(GetAllBookResponse)
	err := c.cc.Invoke(ctx, BookService_GetAllBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetOneBook(ctx context.Context, in *GetOneBookRequest, opts ...grpc.CallOption) (*GetOneBookResponse, error) {
	out := new(GetOneBookResponse)
	err := c.cc.Invoke(ctx, BookService_GetOneBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetOneChapter(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error) {
	out := new(GetOneChapterResponse)
	err := c.cc.Invoke(ctx, BookService_GetOneChapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetOneChapterText(ctx context.Context, in *GetOneChapterTextRequest, opts ...grpc.CallOption) (*GetOneChapterTextResponse, error) {
	out := new(GetOneChapterTextResponse)
	err := c.cc.Invoke(ctx, BookService_GetOneChapterText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	GetAllBook(context.Context, *GetAllBookRequest) (*GetAllBookResponse, error)
	GetOneBook(context.Context, *GetOneBookRequest) (*GetOneBookResponse, error)
	GetOneChapter(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error)
	GetOneChapterText(context.Context, *GetOneChapterTextRequest) (*GetOneChapterTextResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) GetAllBook(context.Context, *GetAllBookRequest) (*GetAllBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBook not implemented")
}
func (UnimplementedBookServiceServer) GetOneBook(context.Context, *GetOneBookRequest) (*GetOneBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBook not implemented")
}
func (UnimplementedBookServiceServer) GetOneChapter(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneChapter not implemented")
}
func (UnimplementedBookServiceServer) GetOneChapterText(context.Context, *GetOneChapterTextRequest) (*GetOneChapterTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneChapterText not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_GetAllBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAllBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetAllBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAllBook(ctx, req.(*GetAllBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetOneBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetOneBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetOneBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetOneBook(ctx, req.(*GetOneBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetOneChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetOneChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetOneChapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetOneChapter(ctx, req.(*GetOneChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetOneChapterText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneChapterTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetOneChapterText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetOneChapterText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetOneChapterText(ctx, req.(*GetOneChapterTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bible.v1.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBook",
			Handler:    _BookService_GetAllBook_Handler,
		},
		{
			MethodName: "GetOneBook",
			Handler:    _BookService_GetOneBook_Handler,
		},
		{
			MethodName: "GetOneChapter",
			Handler:    _BookService_GetOneChapter_Handler,
		},
		{
			MethodName: "GetOneChapterText",
			Handler:    _BookService_GetOneChapterText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bible/v1/book.proto",
}
