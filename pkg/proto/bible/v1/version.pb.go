// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: bible/v1/version.proto

package biblev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Version name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version only NT
	OnlyNt bool `protobuf:"varint,4,opt,name=only_nt,json=onlyNt,proto3" json:"only_nt,omitempty"`
	// Version only OT
	OnlyOt bool `protobuf:"varint,5,opt,name=only_ot,json=onlyOt,proto3" json:"only_ot,omitempty"`
	// Version with apocrypha
	WithApocrypha bool `protobuf:"varint,6,opt,name=with_apocrypha,json=withApocrypha,proto3" json:"with_apocrypha,omitempty"`
	// Version creation time
	// Stored in UTC and follows RFC 3339 format
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Version last update time
	// Stored in UTC and follows RFC 3339 format
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Version formats
	Formats []*VersionFormat `protobuf:"bytes,9,rep,name=formats,proto3" json:"formats,omitempty"`
	// Language ID
	LanguageId    string `protobuf:"bytes,10,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_bible_v1_version_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Version) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Version) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Version) GetOnlyNt() bool {
	if x != nil {
		return x.OnlyNt
	}
	return false
}

func (x *Version) GetOnlyOt() bool {
	if x != nil {
		return x.OnlyOt
	}
	return false
}

func (x *Version) GetWithApocrypha() bool {
	if x != nil {
		return x.WithApocrypha
	}
	return false
}

func (x *Version) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Version) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Version) GetFormats() []*VersionFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *Version) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

type VersionFormat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Format type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Format source reference URL
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	// Format creation time
	// Stored in UTC and follows RFC 3339 format
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Format last update time
	// Stored in UTC and follows RFC 3339 format
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Version ID
	VersionId     string `protobuf:"bytes,6,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionFormat) Reset() {
	*x = VersionFormat{}
	mi := &file_bible_v1_version_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionFormat) ProtoMessage() {}

func (x *VersionFormat) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionFormat.ProtoReflect.Descriptor instead.
func (*VersionFormat) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{1}
}

func (x *VersionFormat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VersionFormat) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VersionFormat) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *VersionFormat) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VersionFormat) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VersionFormat) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type VersionLanguage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Language ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Language code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Language name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Language web origin
	WebOrigin string `protobuf:"bytes,4,opt,name=web_origin,json=webOrigin,proto3" json:"web_origin,omitempty"`
	// Language creation time
	// Stored in UTC and follows RFC 3339 format
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Language last update time
	// Stored in UTC and follows RFC 3339 format
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionLanguage) Reset() {
	*x = VersionLanguage{}
	mi := &file_bible_v1_version_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionLanguage) ProtoMessage() {}

func (x *VersionLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionLanguage.ProtoReflect.Descriptor instead.
func (*VersionLanguage) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{2}
}

func (x *VersionLanguage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VersionLanguage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VersionLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VersionLanguage) GetWebOrigin() string {
	if x != nil {
		return x.WebOrigin
	}
	return ""
}

func (x *VersionLanguage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VersionLanguage) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetAllLanguageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Web origin query params
	WebOrigin     *string `protobuf:"bytes,1,opt,name=web_origin,json=webOrigin,proto3,oneof" json:"web_origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLanguageRequest) Reset() {
	*x = GetAllLanguageRequest{}
	mi := &file_bible_v1_version_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLanguageRequest) ProtoMessage() {}

func (x *GetAllLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetAllLanguageRequest) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllLanguageRequest) GetWebOrigin() string {
	if x != nil && x.WebOrigin != nil {
		return *x.WebOrigin
	}
	return ""
}

type GetAllLanguageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Language list
	Languages     []*VersionLanguage `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLanguageResponse) Reset() {
	*x = GetAllLanguageResponse{}
	mi := &file_bible_v1_version_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLanguageResponse) ProtoMessage() {}

func (x *GetAllLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetAllLanguageResponse) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllLanguageResponse) GetLanguages() []*VersionLanguage {
	if x != nil {
		return x.Languages
	}
	return nil
}

type GetAllVersionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version code query params
	VersionCode *string `protobuf:"bytes,1,opt,name=version_code,json=versionCode,proto3,oneof" json:"version_code,omitempty"`
	// Language code query params
	LangCode *string `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3,oneof" json:"lang_code,omitempty"`
	// Web origin query params
	WebOrigin     *string `protobuf:"bytes,3,opt,name=web_origin,json=webOrigin,proto3,oneof" json:"web_origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVersionRequest) Reset() {
	*x = GetAllVersionRequest{}
	mi := &file_bible_v1_version_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVersionRequest) ProtoMessage() {}

func (x *GetAllVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVersionRequest.ProtoReflect.Descriptor instead.
func (*GetAllVersionRequest) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllVersionRequest) GetVersionCode() string {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return ""
}

func (x *GetAllVersionRequest) GetLangCode() string {
	if x != nil && x.LangCode != nil {
		return *x.LangCode
	}
	return ""
}

func (x *GetAllVersionRequest) GetWebOrigin() string {
	if x != nil && x.WebOrigin != nil {
		return *x.WebOrigin
	}
	return ""
}

type GetAllVersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version list
	Versions      []*Version `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVersionResponse) Reset() {
	*x = GetAllVersionResponse{}
	mi := &file_bible_v1_version_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVersionResponse) ProtoMessage() {}

func (x *GetAllVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bible_v1_version_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVersionResponse.ProtoReflect.Descriptor instead.
func (*GetAllVersionResponse) Descriptor() ([]byte, []int) {
	return file_bible_v1_version_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllVersionResponse) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

var File_bible_v1_version_proto protoreflect.FileDescriptor

var file_bible_v1_version_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x61, 0x70, 0x6f, 0x63, 0x72, 0x79, 0x70, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x41, 0x70, 0x6f, 0x63, 0x72, 0x79, 0x70, 0x68, 0x61, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x77, 0x65, 0x62, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0xde, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0xfa, 0x02, 0x92, 0x41, 0xe1, 0x01, 0x12, 0x70, 0x0a, 0x18, 0x42, 0x69,
	0x62, 0x6c, 0x65, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12, 0x18, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49,
	0x22, 0x33, 0x0a, 0x0e, 0x44, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x6f, 0x6d, 0x6f, 0x32, 0x30, 0x30,
	0x31, 0x32, 0x12, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x6f, 0x6d, 0x6f,
	0x32, 0x30, 0x30, 0x31, 0x32, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x22, 0x04, 0x2f, 0x61,
	0x70, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d,
	0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a,
	0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x2d, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x69, 0x62, 0x6c, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x08, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14,
	0x42, 0x69, 0x62, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bible_v1_version_proto_rawDescOnce sync.Once
	file_bible_v1_version_proto_rawDescData []byte
)

func file_bible_v1_version_proto_rawDescGZIP() []byte {
	file_bible_v1_version_proto_rawDescOnce.Do(func() {
		file_bible_v1_version_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bible_v1_version_proto_rawDesc), len(file_bible_v1_version_proto_rawDesc)))
	})
	return file_bible_v1_version_proto_rawDescData
}

var file_bible_v1_version_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bible_v1_version_proto_goTypes = []any{
	(*Version)(nil),                // 0: bible.v1.Version
	(*VersionFormat)(nil),          // 1: bible.v1.VersionFormat
	(*VersionLanguage)(nil),        // 2: bible.v1.VersionLanguage
	(*GetAllLanguageRequest)(nil),  // 3: bible.v1.GetAllLanguageRequest
	(*GetAllLanguageResponse)(nil), // 4: bible.v1.GetAllLanguageResponse
	(*GetAllVersionRequest)(nil),   // 5: bible.v1.GetAllVersionRequest
	(*GetAllVersionResponse)(nil),  // 6: bible.v1.GetAllVersionResponse
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
}
var file_bible_v1_version_proto_depIdxs = []int32{
	7,  // 0: bible.v1.Version.created_at:type_name -> google.protobuf.Timestamp
	7,  // 1: bible.v1.Version.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 2: bible.v1.Version.formats:type_name -> bible.v1.VersionFormat
	7,  // 3: bible.v1.VersionFormat.created_at:type_name -> google.protobuf.Timestamp
	7,  // 4: bible.v1.VersionFormat.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 5: bible.v1.VersionLanguage.created_at:type_name -> google.protobuf.Timestamp
	7,  // 6: bible.v1.VersionLanguage.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 7: bible.v1.GetAllLanguageResponse.languages:type_name -> bible.v1.VersionLanguage
	0,  // 8: bible.v1.GetAllVersionResponse.versions:type_name -> bible.v1.Version
	3,  // 9: bible.v1.VersionService.GetAllLanguage:input_type -> bible.v1.GetAllLanguageRequest
	5,  // 10: bible.v1.VersionService.GetAllVersion:input_type -> bible.v1.GetAllVersionRequest
	4,  // 11: bible.v1.VersionService.GetAllLanguage:output_type -> bible.v1.GetAllLanguageResponse
	6,  // 12: bible.v1.VersionService.GetAllVersion:output_type -> bible.v1.GetAllVersionResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_bible_v1_version_proto_init() }
func file_bible_v1_version_proto_init() {
	if File_bible_v1_version_proto != nil {
		return
	}
	file_bible_v1_version_proto_msgTypes[3].OneofWrappers = []any{}
	file_bible_v1_version_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bible_v1_version_proto_rawDesc), len(file_bible_v1_version_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bible_v1_version_proto_goTypes,
		DependencyIndexes: file_bible_v1_version_proto_depIdxs,
		MessageInfos:      file_bible_v1_version_proto_msgTypes,
	}.Build()
	File_bible_v1_version_proto = out.File
	file_bible_v1_version_proto_goTypes = nil
	file_bible_v1_version_proto_depIdxs = nil
}
