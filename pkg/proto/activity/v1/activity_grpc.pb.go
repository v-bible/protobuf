// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activity/v1/activity.proto

package activityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityService_GetAllAnnotations_FullMethodName = "/activity.v1.ActivityService/GetAllAnnotations"
	ActivityService_GetOneAnnotation_FullMethodName  = "/activity.v1.ActivityService/GetOneAnnotation"
	ActivityService_CreateAnnotation_FullMethodName  = "/activity.v1.ActivityService/CreateAnnotation"
	ActivityService_UpdateAnnotation_FullMethodName  = "/activity.v1.ActivityService/UpdateAnnotation"
	ActivityService_DeleteAnnotation_FullMethodName  = "/activity.v1.ActivityService/DeleteAnnotation"
)

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Activity service definition
type ActivityServiceClient interface {
	// Retrieve all annotations for authenticated user
	GetAllAnnotations(ctx context.Context, in *GetAllAnnotationsRequest, opts ...grpc.CallOption) (*GetAllAnnotationsResponse, error)
	// Retrieve one annotation by ID for authenticated user
	GetOneAnnotation(ctx context.Context, in *GetOneAnnotationRequest, opts ...grpc.CallOption) (*GetOneAnnotationResponse, error)
	// Create one annotation for authenticated user
	CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*CreateAnnotationResponse, error)
	// Update one annotation by ID for authenticated user
	UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*UpdateAnnotationResponse, error)
	// Delete one annotation by ID for authenticated user
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*DeleteAnnotationResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) GetAllAnnotations(ctx context.Context, in *GetAllAnnotationsRequest, opts ...grpc.CallOption) (*GetAllAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAnnotationsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetAllAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetOneAnnotation(ctx context.Context, in *GetOneAnnotationRequest, opts ...grpc.CallOption) (*GetOneAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneAnnotationResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetOneAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*CreateAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnnotationResponse)
	err := c.cc.Invoke(ctx, ActivityService_CreateAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*UpdateAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnnotationResponse)
	err := c.cc.Invoke(ctx, ActivityService_UpdateAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*DeleteAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnnotationResponse)
	err := c.cc.Invoke(ctx, ActivityService_DeleteAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility.
//
// Activity service definition
type ActivityServiceServer interface {
	// Retrieve all annotations for authenticated user
	GetAllAnnotations(context.Context, *GetAllAnnotationsRequest) (*GetAllAnnotationsResponse, error)
	// Retrieve one annotation by ID for authenticated user
	GetOneAnnotation(context.Context, *GetOneAnnotationRequest) (*GetOneAnnotationResponse, error)
	// Create one annotation for authenticated user
	CreateAnnotation(context.Context, *CreateAnnotationRequest) (*CreateAnnotationResponse, error)
	// Update one annotation by ID for authenticated user
	UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*UpdateAnnotationResponse, error)
	// Delete one annotation by ID for authenticated user
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*DeleteAnnotationResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityServiceServer struct{}

func (UnimplementedActivityServiceServer) GetAllAnnotations(context.Context, *GetAllAnnotationsRequest) (*GetAllAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnnotations not implemented")
}
func (UnimplementedActivityServiceServer) GetOneAnnotation(context.Context, *GetOneAnnotationRequest) (*GetOneAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneAnnotation not implemented")
}
func (UnimplementedActivityServiceServer) CreateAnnotation(context.Context, *CreateAnnotationRequest) (*CreateAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotation not implemented")
}
func (UnimplementedActivityServiceServer) UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*UpdateAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotation not implemented")
}
func (UnimplementedActivityServiceServer) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*DeleteAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}
func (UnimplementedActivityServiceServer) testEmbeddedByValue()                         {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	// If the following call pancis, it indicates UnimplementedActivityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_GetAllAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetAllAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetAllAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetAllAnnotations(ctx, req.(*GetAllAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetOneAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetOneAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetOneAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetOneAnnotation(ctx, req.(*GetOneAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_CreateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).CreateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_CreateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).CreateAnnotation(ctx, req.(*CreateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_UpdateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).UpdateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_UpdateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).UpdateAnnotation(ctx, req.(*UpdateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_DeleteAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.v1.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAnnotations",
			Handler:    _ActivityService_GetAllAnnotations_Handler,
		},
		{
			MethodName: "GetOneAnnotation",
			Handler:    _ActivityService_GetOneAnnotation_Handler,
		},
		{
			MethodName: "CreateAnnotation",
			Handler:    _ActivityService_CreateAnnotation_Handler,
		},
		{
			MethodName: "UpdateAnnotation",
			Handler:    _ActivityService_UpdateAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _ActivityService_DeleteAnnotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/v1/activity.proto",
}
