// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activity/v1/annotation.proto

package activityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnnotationService_GetAllAnnotation_FullMethodName = "/activity.v1.AnnotationService/GetAllAnnotation"
	AnnotationService_GetOneAnnotation_FullMethodName = "/activity.v1.AnnotationService/GetOneAnnotation"
	AnnotationService_CreateAnnotation_FullMethodName = "/activity.v1.AnnotationService/CreateAnnotation"
	AnnotationService_UpdateAnnotation_FullMethodName = "/activity.v1.AnnotationService/UpdateAnnotation"
	AnnotationService_DeleteAnnotation_FullMethodName = "/activity.v1.AnnotationService/DeleteAnnotation"
)

// AnnotationServiceClient is the client API for AnnotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Annotation service definition
type AnnotationServiceClient interface {
	// Retrieve all annotations for authenticated user
	GetAllAnnotation(ctx context.Context, in *GetAllAnnotationsRequest, opts ...grpc.CallOption) (*GetAllAnnotationsResponse, error)
	// Retrieve one annotation by ID for authenticated user
	GetOneAnnotation(ctx context.Context, in *GetOneAnnotationRequest, opts ...grpc.CallOption) (*GetOneAnnotationResponse, error)
	// Create one annotation for authenticated user
	CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*CreateAnnotationResponse, error)
	// Update one annotation by ID for authenticated user
	UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*UpdateAnnotationResponse, error)
	// Delete one annotation by ID for authenticated user
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*DeleteAnnotationResponse, error)
}

type annotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnotationServiceClient(cc grpc.ClientConnInterface) AnnotationServiceClient {
	return &annotationServiceClient{cc}
}

func (c *annotationServiceClient) GetAllAnnotation(ctx context.Context, in *GetAllAnnotationsRequest, opts ...grpc.CallOption) (*GetAllAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAnnotationsResponse)
	err := c.cc.Invoke(ctx, AnnotationService_GetAllAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) GetOneAnnotation(ctx context.Context, in *GetOneAnnotationRequest, opts ...grpc.CallOption) (*GetOneAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_GetOneAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*CreateAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_CreateAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*UpdateAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_UpdateAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*DeleteAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_DeleteAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnotationServiceServer is the server API for AnnotationService service.
// All implementations must embed UnimplementedAnnotationServiceServer
// for forward compatibility.
//
// Annotation service definition
type AnnotationServiceServer interface {
	// Retrieve all annotations for authenticated user
	GetAllAnnotation(context.Context, *GetAllAnnotationsRequest) (*GetAllAnnotationsResponse, error)
	// Retrieve one annotation by ID for authenticated user
	GetOneAnnotation(context.Context, *GetOneAnnotationRequest) (*GetOneAnnotationResponse, error)
	// Create one annotation for authenticated user
	CreateAnnotation(context.Context, *CreateAnnotationRequest) (*CreateAnnotationResponse, error)
	// Update one annotation by ID for authenticated user
	UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*UpdateAnnotationResponse, error)
	// Delete one annotation by ID for authenticated user
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*DeleteAnnotationResponse, error)
	mustEmbedUnimplementedAnnotationServiceServer()
}

// UnimplementedAnnotationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnnotationServiceServer struct{}

func (UnimplementedAnnotationServiceServer) GetAllAnnotation(context.Context, *GetAllAnnotationsRequest) (*GetAllAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) GetOneAnnotation(context.Context, *GetOneAnnotationRequest) (*GetOneAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) CreateAnnotation(context.Context, *CreateAnnotationRequest) (*CreateAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*UpdateAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*DeleteAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) mustEmbedUnimplementedAnnotationServiceServer() {}
func (UnimplementedAnnotationServiceServer) testEmbeddedByValue()                           {}

// UnsafeAnnotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnotationServiceServer will
// result in compilation errors.
type UnsafeAnnotationServiceServer interface {
	mustEmbedUnimplementedAnnotationServiceServer()
}

func RegisterAnnotationServiceServer(s grpc.ServiceRegistrar, srv AnnotationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnnotationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnnotationService_ServiceDesc, srv)
}

func _AnnotationService_GetAllAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).GetAllAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_GetAllAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).GetAllAnnotation(ctx, req.(*GetAllAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_GetOneAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).GetOneAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_GetOneAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).GetOneAnnotation(ctx, req.(*GetOneAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_CreateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).CreateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_CreateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).CreateAnnotation(ctx, req.(*CreateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_UpdateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).UpdateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_UpdateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).UpdateAnnotation(ctx, req.(*UpdateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_DeleteAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnotationService_ServiceDesc is the grpc.ServiceDesc for AnnotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.v1.AnnotationService",
	HandlerType: (*AnnotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAnnotation",
			Handler:    _AnnotationService_GetAllAnnotation_Handler,
		},
		{
			MethodName: "GetOneAnnotation",
			Handler:    _AnnotationService_GetOneAnnotation_Handler,
		},
		{
			MethodName: "CreateAnnotation",
			Handler:    _AnnotationService_CreateAnnotation_Handler,
		},
		{
			MethodName: "UpdateAnnotation",
			Handler:    _AnnotationService_UpdateAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _AnnotationService_DeleteAnnotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/v1/annotation.proto",
}
